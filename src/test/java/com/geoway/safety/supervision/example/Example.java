package com.geoway.safety.supervision.example;


/**
 * @author: zhaoguiyang
 * @email: zhaoguiyang@geoway.com.cn
 * @date: 2017/11/8 15:00
 * @description:代码示例规范描述文件
 * 声明:本代码规范及注释相关信息参考北京东华合创科技有限公司编写的<SLAJ-软件开发规范V1.2.doc>
 * 示例规规范如下:
 * (一)  命名风格
 *    对标识符的命名要使用英文单词，必要时可以使用汉语拼音的全拼，严禁使用简拼来为任何标识符命名。严禁在代码中出
 *    现任何魔法值!!
 *    主要使用PascalCasing、camelCasing和SCREAMING_CAPS三种标识符的命名风格，涵盖JAVA、JavaScript、SQL等编程语言。
 *    PascalCasing风格
 *    描述：把标识符中的每个单词的首字母(包括长度为2个字符以上的首字母缩写词)大写。两个字母长的首字母缩写词是一个
 *         特例，在这种情况下两个字母都要大写。
 *    示例：
 *    PropertyDescriptor
 *    HtmlTag
 *    IOStream
 *    camelCasing风格
 *    描述：把标识符中除了第一个单词之外的所有单词的首字母大写。
 *    示例：
 *    propertyDescriptor
 *    htmlTag
 *    ioStream
 *    SCREAMING_CAPS风格
 *    描述：标识符中所有字母均大写，单词之间用下划线分隔。
 *  (二) 类(包)导入规范
 *    在import需要用到的类时，尽量少用import *；,如本示例所示
 *    而应当具体指明需要导入的类，利于代码阅读，知道用到了具体的什么类。导入需要用到的类应当按照一定的顺序导入，
 *    不能随便写，此处规定，导入顺序如下，且前后类别之间以空行隔开,参照本类：
 *    JAVA标准包类
 *    JAVA扩展包类
 *    第三方组件包类
 *    自行开发基础库包类
 *    业务系统自身基础包类
 *  (三) 类注释规范
 *    对类和接口应当加以注释，对该类作一个简单功能描述，同时还可以标注其他内容：如公司名称，开始编写日期等，
 *    但作者必须标注上，方便在出现问题时由原作者负责解释。
 *  (四)方法注释规范
 *    应当对方法进行注释。注释必须含“功能”描述，参数描述，返回值描述。如果参数较为复杂，或者怕遗忘，
 *    则详细说明每个参数的作用、取值范围及相互间的关系。
 *  (五)命名规范(参照本类的代码)
 *    1.包的命名规范
 *      包（Packages），一个唯一包名的前缀总是全部小写的ASCII字母并且是一个顶级域名，通常是com，edu，gov，mil，
 *      net，org，或1981年ISO 3166标准所指定的标识国家的英文双字符代码。包名的后续部分根据不同机构各自内部的命
 *      名规范而不尽相同。这类命名规范可能以特定目录名的组成来区分部门,包的划分是以“先分层，再模块”为原则，这样
 *      便于统一的控制一类操作。每个web、service、dao、model、common下又都可以按照字模块划分。
 *    2.类/接口命名规范
 *      类和接口表示一类对象，必须以名词命名。类名的第一个字母必须大写，类名如由多个单词（或缩写）构成，则每个单词
 *      （或缩写）的首字母必须大写。尽量做到类名简洁且富于描述，避免缩写词（除非该缩写词被广泛使用）。如用户信息管
 *      理命名为UserInfoManager。进一步的规定，参见包的命名规范。例如，DAO类必须以“DAO”三个大写字母结尾、Servlet类
 *      必须以“Servlet”结尾等。类（接口）名和表名的对应关系为：类（接口）名按照表名第一个字母大写不变，后续字母变
 *      成小写，直到遇到下划线“_”,下划线“_”不出现在类（接口）名中，下划线“_”紧跟的字母保存大写不变，后续字母变成小写，
 *      以此类推。
 *    3.方法\变量\常量\参数\资源名称的命名规范参照本代码
 *   (六) 方法编写规范\语句规范\注释规范 参照本代码示例
 *
 *
 */
public class Example {

  //遵循驼峰命名,代码中的命名严禁使用拼音与英文混合的方式,且避免不规范的缩写,国际缩写或通用缩写除外,如:userInfo
  //变量名禁止以下划线或美元符号开头
  public String exampleName = "示例名称";

  //常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长
  public final int  MAX_STOCK_COUNT = 10;

  public static void main(String[] args) {
// 缩进 4 个空格
    String say = "hello";
// 运算符的左右必须有一个空格
    int flag = 0;
// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格
    if (flag == 0) {
      System.out.println(say);
    }
// 左大括号前加空格且不换行；左大括号后换行
    if (flag == 1) {
      System.out.println("world");
// 右大括号前换行，右大括号后有 else，不用换行
    } else {
      System.out.println("ok");
// 在右大括号后直接结束，则必须换行
    }
  }

  /**
   *打印本地存放在数组中的值到本地控制台
   * @param localValues 存放本子值的数据
   * @return 是否正常打印结束;
   */
  public boolean printLocalValue(String[] localValues){
    /**
     * 规范:
     *
     * 禁止方法提供超过四个的参数。如果确实需要更多参数，则用参数建立新的值对象，以此对象做参数。参数类型和返回
     * 值尽量接口化，以屏蔽具体的实现细节，提高程序的可扩展性。在方法的入口处对参数进行有效性检查。
     *
     * 给参数命名时使用camelCasing风格，要使用具有描述性的参数名，要考虑根据参数的意思而不是参数的类型来命名参数，
     * 这样能更好的利用参数名来描述语义，而不是描述类型。
     * 对于有返回值的方法，禁止提供多个出口，而只能提供一个出口。
     * 方法注意事项:
     *  方法的规模尽量限制在200行以内。超过200行则多半存在可以独立的逻辑单元，则可以将其抽取出去另写方法；
     *  一个方法仅完成一件功能；
     *  为简单功能编写方法；
     *  方法的功能应该是可预测的，也就是只要输入数据相同就应产生同样的输出；
     *  尽量不要编写依赖于其他方法内部实现的方法；
     *  避免设计多参数方法，不使用的参数从接口中去掉；参数多时将之作为新对象的字段，以对象形式传入；
     *  用注释详细说明每个参数的作用、取值范围及相互间的关系；
     *  检查所有参数输入的有效性；
     *  检查所有非参数输入的有效性，如数据文件、公共变量等。
     *  方法名应准确描述方法的功能；
     *  方法的返回值要清楚、明了，让使用者不容易忽视错误情况。
     *  减少方法本身或方法间的递归调用；
     */


    //对参数进行有效性检查
    if(null == localValues || localValues.length == 0){
      System.out.println("不包含任何需要打印的值!");
      return false;
    }
    //临时变量通常被取名为i，j，k，m和n，它们一般用于整型；c，d，e，它们一般用于字符型。
    for (int i = 0; i < localValues.length; i++) {
      System.out.println("当前值为:" + localValues[i]+"这里的文字是为了演示多行规范,"
          + "当长度过长时应该将语句或者表达式进行多行书写并进行适当的缩进,使得排版整齐,语句刻度");

      if (i == localValues.length-1){
        //If语句要求总是用“{”和“}”括起来
        return true;
      }
    }
    return false;
  }
}
